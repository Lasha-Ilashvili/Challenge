// Generated by Dagger (https://dagger.dev).
package com.example.challenge.domain.usecase.connection;

import com.example.challenge.domain.repository.connection.ConnectionsRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class GetConnectionsUseCase_Factory implements Factory<GetConnectionsUseCase> {
  private final Provider<ConnectionsRepository> connectionsRepositoryProvider;

  public GetConnectionsUseCase_Factory(
      Provider<ConnectionsRepository> connectionsRepositoryProvider) {
    this.connectionsRepositoryProvider = connectionsRepositoryProvider;
  }

  @Override
  public GetConnectionsUseCase get() {
    return newInstance(connectionsRepositoryProvider.get());
  }

  public static GetConnectionsUseCase_Factory create(
      Provider<ConnectionsRepository> connectionsRepositoryProvider) {
    return new GetConnectionsUseCase_Factory(connectionsRepositoryProvider);
  }

  public static GetConnectionsUseCase newInstance(ConnectionsRepository connectionsRepository) {
    return new GetConnectionsUseCase(connectionsRepository);
  }
}
