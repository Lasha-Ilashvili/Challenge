// Generated by Dagger (https://dagger.dev).
package com.example.challenge.di;

import com.example.challenge.domain.usecase.validator.EmailValidatorUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class UseCaseModule_ProvideEmailValidatorUseCaseFactory implements Factory<EmailValidatorUseCase> {
  @Override
  public EmailValidatorUseCase get() {
    return provideEmailValidatorUseCase();
  }

  public static UseCaseModule_ProvideEmailValidatorUseCaseFactory create() {
    return InstanceHolder.INSTANCE;
  }

  public static EmailValidatorUseCase provideEmailValidatorUseCase() {
    return Preconditions.checkNotNullFromProvides(UseCaseModule.INSTANCE.provideEmailValidatorUseCase());
  }

  private static final class InstanceHolder {
    private static final UseCaseModule_ProvideEmailValidatorUseCaseFactory INSTANCE = new UseCaseModule_ProvideEmailValidatorUseCaseFactory();
  }
}
