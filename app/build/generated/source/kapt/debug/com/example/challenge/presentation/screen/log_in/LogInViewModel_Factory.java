// Generated by Dagger (https://dagger.dev).
package com.example.challenge.presentation.screen.log_in;

import com.example.challenge.domain.usecase.datastore.SaveTokenUseCase;
import com.example.challenge.domain.usecase.log_in.LogInUseCase;
import com.example.challenge.domain.usecase.validator.EmailValidatorUseCase;
import com.example.challenge.domain.usecase.validator.PasswordValidatorUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class LogInViewModel_Factory implements Factory<LogInViewModel> {
  private final Provider<LogInUseCase> logInUseCaseProvider;

  private final Provider<SaveTokenUseCase> saveTokenUseCaseProvider;

  private final Provider<EmailValidatorUseCase> emailValidatorProvider;

  private final Provider<PasswordValidatorUseCase> passwordValidatorProvider;

  public LogInViewModel_Factory(Provider<LogInUseCase> logInUseCaseProvider,
      Provider<SaveTokenUseCase> saveTokenUseCaseProvider,
      Provider<EmailValidatorUseCase> emailValidatorProvider,
      Provider<PasswordValidatorUseCase> passwordValidatorProvider) {
    this.logInUseCaseProvider = logInUseCaseProvider;
    this.saveTokenUseCaseProvider = saveTokenUseCaseProvider;
    this.emailValidatorProvider = emailValidatorProvider;
    this.passwordValidatorProvider = passwordValidatorProvider;
  }

  @Override
  public LogInViewModel get() {
    return newInstance(logInUseCaseProvider.get(), saveTokenUseCaseProvider.get(), emailValidatorProvider.get(), passwordValidatorProvider.get());
  }

  public static LogInViewModel_Factory create(Provider<LogInUseCase> logInUseCaseProvider,
      Provider<SaveTokenUseCase> saveTokenUseCaseProvider,
      Provider<EmailValidatorUseCase> emailValidatorProvider,
      Provider<PasswordValidatorUseCase> passwordValidatorProvider) {
    return new LogInViewModel_Factory(logInUseCaseProvider, saveTokenUseCaseProvider, emailValidatorProvider, passwordValidatorProvider);
  }

  public static LogInViewModel newInstance(LogInUseCase logInUseCase,
      SaveTokenUseCase saveTokenUseCase, EmailValidatorUseCase emailValidator,
      PasswordValidatorUseCase passwordValidator) {
    return new LogInViewModel(logInUseCase, saveTokenUseCase, emailValidator, passwordValidator);
  }
}
