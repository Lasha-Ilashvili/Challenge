// Generated by Dagger (https://dagger.dev).
package com.example.challenge.presentation.screen.connection;

import com.example.challenge.domain.usecase.connection.GetConnectionsUseCase;
import com.example.challenge.domain.usecase.datastore.ClearDataStoreUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ConnectionsViewModel_Factory implements Factory<ConnectionsViewModel> {
  private final Provider<GetConnectionsUseCase> getConnectionsUseCaseProvider;

  private final Provider<ClearDataStoreUseCase> clearDataStoreUseCaseProvider;

  public ConnectionsViewModel_Factory(Provider<GetConnectionsUseCase> getConnectionsUseCaseProvider,
      Provider<ClearDataStoreUseCase> clearDataStoreUseCaseProvider) {
    this.getConnectionsUseCaseProvider = getConnectionsUseCaseProvider;
    this.clearDataStoreUseCaseProvider = clearDataStoreUseCaseProvider;
  }

  @Override
  public ConnectionsViewModel get() {
    return newInstance(getConnectionsUseCaseProvider.get(), clearDataStoreUseCaseProvider.get());
  }

  public static ConnectionsViewModel_Factory create(
      Provider<GetConnectionsUseCase> getConnectionsUseCaseProvider,
      Provider<ClearDataStoreUseCase> clearDataStoreUseCaseProvider) {
    return new ConnectionsViewModel_Factory(getConnectionsUseCaseProvider, clearDataStoreUseCaseProvider);
  }

  public static ConnectionsViewModel newInstance(GetConnectionsUseCase getConnectionsUseCase,
      ClearDataStoreUseCase clearDataStoreUseCase) {
    return new ConnectionsViewModel(getConnectionsUseCase, clearDataStoreUseCase);
  }
}
