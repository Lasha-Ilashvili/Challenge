// Generated by Dagger (https://dagger.dev).
package com.example.challenge.di;

import com.example.challenge.domain.repository.datastore.DataStoreRepository;
import com.example.challenge.domain.usecase.datastore.GetTokenUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class UseCaseModule_ProvideGetTokenUseCaseFactory implements Factory<GetTokenUseCase> {
  private final Provider<DataStoreRepository> dataStoreRepositoryProvider;

  public UseCaseModule_ProvideGetTokenUseCaseFactory(
      Provider<DataStoreRepository> dataStoreRepositoryProvider) {
    this.dataStoreRepositoryProvider = dataStoreRepositoryProvider;
  }

  @Override
  public GetTokenUseCase get() {
    return provideGetTokenUseCase(dataStoreRepositoryProvider.get());
  }

  public static UseCaseModule_ProvideGetTokenUseCaseFactory create(
      Provider<DataStoreRepository> dataStoreRepositoryProvider) {
    return new UseCaseModule_ProvideGetTokenUseCaseFactory(dataStoreRepositoryProvider);
  }

  public static GetTokenUseCase provideGetTokenUseCase(DataStoreRepository dataStoreRepository) {
    return Preconditions.checkNotNullFromProvides(UseCaseModule.INSTANCE.provideGetTokenUseCase(dataStoreRepository));
  }
}
