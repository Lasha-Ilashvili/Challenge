// Generated by Dagger (https://dagger.dev).
package com.example.challenge.di;

import com.example.challenge.data.common.HandleResponse;
import com.example.challenge.data.service.log_in.LogInService;
import com.example.challenge.domain.repository.log_in.LogInRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class RepositoryModule_ProvideLogInRepositoryFactory implements Factory<LogInRepository> {
  private final Provider<LogInService> logInServiceProvider;

  private final Provider<HandleResponse> handleResponseProvider;

  public RepositoryModule_ProvideLogInRepositoryFactory(Provider<LogInService> logInServiceProvider,
      Provider<HandleResponse> handleResponseProvider) {
    this.logInServiceProvider = logInServiceProvider;
    this.handleResponseProvider = handleResponseProvider;
  }

  @Override
  public LogInRepository get() {
    return provideLogInRepository(logInServiceProvider.get(), handleResponseProvider.get());
  }

  public static RepositoryModule_ProvideLogInRepositoryFactory create(
      Provider<LogInService> logInServiceProvider,
      Provider<HandleResponse> handleResponseProvider) {
    return new RepositoryModule_ProvideLogInRepositoryFactory(logInServiceProvider, handleResponseProvider);
  }

  public static LogInRepository provideLogInRepository(LogInService logInService,
      HandleResponse handleResponse) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.provideLogInRepository(logInService, handleResponse));
  }
}
