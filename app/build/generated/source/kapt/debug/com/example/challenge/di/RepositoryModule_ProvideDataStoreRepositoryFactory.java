// Generated by Dagger (https://dagger.dev).
package com.example.challenge.di;

import androidx.datastore.core.DataStore;
import androidx.datastore.preferences.core.Preferences;
import com.example.challenge.domain.repository.datastore.DataStoreRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class RepositoryModule_ProvideDataStoreRepositoryFactory implements Factory<DataStoreRepository> {
  private final Provider<DataStore<Preferences>> dataStoreProvider;

  public RepositoryModule_ProvideDataStoreRepositoryFactory(
      Provider<DataStore<Preferences>> dataStoreProvider) {
    this.dataStoreProvider = dataStoreProvider;
  }

  @Override
  public DataStoreRepository get() {
    return provideDataStoreRepository(dataStoreProvider.get());
  }

  public static RepositoryModule_ProvideDataStoreRepositoryFactory create(
      Provider<DataStore<Preferences>> dataStoreProvider) {
    return new RepositoryModule_ProvideDataStoreRepositoryFactory(dataStoreProvider);
  }

  public static DataStoreRepository provideDataStoreRepository(DataStore<Preferences> dataStore) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.provideDataStoreRepository(dataStore));
  }
}
