// Generated by Dagger (https://dagger.dev).
package com.example.challenge.di;

import com.example.challenge.domain.repository.connection.ConnectionsRepository;
import com.example.challenge.domain.usecase.connection.GetConnectionsUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class UseCaseModule_ProvideGetConnectionsUseCaseFactory implements Factory<GetConnectionsUseCase> {
  private final Provider<ConnectionsRepository> connectionsRepositoryProvider;

  public UseCaseModule_ProvideGetConnectionsUseCaseFactory(
      Provider<ConnectionsRepository> connectionsRepositoryProvider) {
    this.connectionsRepositoryProvider = connectionsRepositoryProvider;
  }

  @Override
  public GetConnectionsUseCase get() {
    return provideGetConnectionsUseCase(connectionsRepositoryProvider.get());
  }

  public static UseCaseModule_ProvideGetConnectionsUseCaseFactory create(
      Provider<ConnectionsRepository> connectionsRepositoryProvider) {
    return new UseCaseModule_ProvideGetConnectionsUseCaseFactory(connectionsRepositoryProvider);
  }

  public static GetConnectionsUseCase provideGetConnectionsUseCase(
      ConnectionsRepository connectionsRepository) {
    return Preconditions.checkNotNullFromProvides(UseCaseModule.INSTANCE.provideGetConnectionsUseCase(connectionsRepository));
  }
}
